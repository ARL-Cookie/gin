;;;; SPDX-FileCopyrightText: Atlas Engineer LLC
;;;; SPDX-License-Identifier: BSD-3-Clause

(in-package :theme)

(defun hex->triple (hex)
  (let ((hex (if (uiop:string-prefix-p "#" hex) (subseq hex 1) hex)))
    (case (length hex)
      (3 (mapcar (rcurry #'/ 15.0)
                 (list (parse-integer (subseq hex 0 1) :radix 16)
                       (parse-integer (subseq hex 1 2) :radix 16)
                       (parse-integer (subseq hex 2 3) :radix 16))))
      (6 (mapcar (rcurry #'/ 255.0)
                 (list (parse-integer (subseq hex 0 2) :radix 16)
                       (parse-integer (subseq hex 2 4) :radix 16)
                       (parse-integer (subseq hex 4 6) :radix 16)))))))

(defun rgb/a->triple (rgba)
  (mapcar
   (compose (rcurry #'/ 255.0)
            #'parse-integer
            (curry #'string-trim serapeum:whitespace))
   (subseq
    (uiop:split-string (ppcre:regex-replace-all "(rgba?\\s*\\(\\s*|\\s*\\)\\s*)" rgba "") :separator ",")
    0 3)))

;; Parsed with the help of GTK:
;; (mappend (lambda (color)
;;            (let ((rgba (gdk:gdk-rgba-parse color)))
;;              (list color
;;                    (list (coerce (gdk:gdk-rgba-red rgba) 'single-float)
;;                          (coerce (gdk:gdk-rgba-green rgba) 'single-float)
;;                          (coerce (gdk:gdk-rgba-blue rgba) 'single-float)))))
;;          *css-colors*)
(defvar *colors->triples*
  (serapeum:dict
   'equalp
   "AliceBlue" '(0.9411765 0.972549 1.0)
   "AntiqueWhite" '(0.98039216 0.92156863 0.84313726)
   "Aqua" '(0.0 1.0 1.0)
   "Aquamarine" '(0.49803922 1.0 0.83137256)
   "Azure" '(0.9411765 1.0 1.0)
   "Beige" '(0.9607843 0.9607843 0.8627451)
   "Bisque" '(1.0 0.89411765 0.76862746)
   "Black" '(0.0 0.0 0.0)
   "BlanchedAlmond" '(1.0 0.92156863 0.8039216)
   "Blue" '(0.0 0.0 1.0)
   "BlueViolet" '(0.5411765 0.16862746 0.8862745)
   "Brown" '(0.64705884 0.16470589 0.16470589)
   "BurlyWood" '(0.87058824 0.72156864 0.5294118)
   "CadetBlue" '(0.37254903 0.61960787 0.627451)
   "Chartreuse" '(0.49803922 1.0 0.0)
   "Chocolate" '(0.8235294 0.4117647 0.11764706)
   "Coral" '(1.0 0.49803922 0.3137255)
   "CornflowerBlue" '(0.39215687 0.58431375 0.92941177)
   "Cornsilk" '(1.0 0.972549 0.8627451)
   "Crimson" '(0.8627451 0.078431375 0.23529412)
   "Cyan" '(0.0 1.0 1.0)
   "DarkBlue" '(0.0 0.0 0.54509807)
   "DarkCyan" '(0.0 0.54509807 0.54509807)
   "DarkGoldenRod" '(0.72156864 0.5254902 0.043137256)
   "DarkGray" '(0.6627451 0.6627451 0.6627451)
   "DarkGrey" '(0.6627451 0.6627451 0.6627451)
   "DarkGreen" '(0.0 0.39215687 0.0)
   "DarkKhaki" '(0.7411765 0.7176471 0.41960785)
   "DarkMagenta" '(0.54509807 0.0 0.54509807)
   "DarkOliveGreen" '(0.33333334 0.41960785 0.18431373)
   "DarkOrange" '(1.0 0.54901963 0.0)
   "DarkOrchid" '(0.6 0.19607843 0.8)
   "DarkRed" '(0.54509807 0.0 0.0)
   "DarkSalmon" '(0.9137255 0.5882353 0.47843137)
   "DarkSeaGreen" '(0.56078434 0.7372549 0.56078434)
   "DarkSlateBlue" '(0.28235295 0.23921569 0.54509807)
   "DarkSlateGray" '(0.18431373 0.30980393 0.30980393)
   "DarkSlateGrey" '(0.18431373 0.30980393 0.30980393)
   "DarkTurquoise" '(0.0 0.80784315 0.81960785)
   "DarkViolet" '(0.5803922 0.0 0.827451)
   "DeepPink" '(1.0 0.078431375 0.5764706)
   "DeepSkyBlue" '(0.0 0.7490196 1.0)
   "DimGray" '(0.4117647 0.4117647 0.4117647)
   "DimGrey" '(0.4117647 0.4117647 0.4117647)
   "DodgerBlue" '(0.11764706 0.5647059 1.0)
   "FireBrick" '(0.69803923 0.13333334 0.13333334)
   "FloralWhite" '(1.0 0.98039216 0.9411765)
   "ForestGreen" '(0.13333334 0.54509807 0.13333334)
   "Fuchsia" '(1.0 0.0 1.0)
   "Gainsboro" '(0.8627451 0.8627451 0.8627451)
   "GhostWhite" '(0.972549 0.972549 1.0)
   "Gold" '(1.0 0.84313726 0.0)
   "GoldenRod" '(0.85490197 0.64705884 0.1254902)
   "Gray" '(0.5019608 0.5019608 0.5019608)
   "Grey" '(0.5019608 0.5019608 0.5019608)
   "Green" '(0.0 0.5019608 0.0)
   "GreenYellow" '(0.6784314 1.0 0.18431373)
   "HoneyDew" '(0.9411765 1.0 0.9411765)
   "HotPink" '(1.0 0.4117647 0.7058824)
   "IndianRed" '(0.8039216 0.36078432 0.36078432)
   "Indigo" '(0.29411766 0.0 0.50980395)
   "Ivory" '(1.0 1.0 0.9411765)
   "Khaki" '(0.9411765 0.9019608 0.54901963)
   "Lavender" '(0.9019608 0.9019608 0.98039216)
   "LavenderBlush" '(1.0 0.9411765 0.9607843)
   "LawnGreen" '(0.4862745 0.9882353 0.0)
   "LemonChiffon" '(1.0 0.98039216 0.8039216)
   "LightBlue" '(0.6784314 0.84705883 0.9019608)
   "LightCoral" '(0.9411765 0.5019608 0.5019608)
   "LightCyan" '(0.8784314 1.0 1.0)
   "LightGoldenRodYellow" '(0.98039216 0.98039216 0.8235294)
   "LightGray" '(0.827451 0.827451 0.827451)
   "LightGrey" '(0.827451 0.827451 0.827451)
   "LightGreen" '(0.5647059 0.93333334 0.5647059)
   "LightPink" '(1.0 0.7137255 0.75686276)
   "LightSalmon" '(1.0 0.627451 0.47843137)
   "LightSeaGreen" '(0.1254902 0.69803923 0.6666667)
   "LightSkyBlue" '(0.5294118 0.80784315 0.98039216)
   "LightSlateGray" '(0.46666667 0.53333336 0.6)
   "LightSlateGrey" '(0.46666667 0.53333336 0.6)
   "LightSteelBlue" '(0.6901961 0.76862746 0.87058824)
   "LightYellow" '(1.0 1.0 0.8784314)
   "Lime" '(0.0 1.0 0.0)
   "LimeGreen" '(0.19607843 0.8039216 0.19607843)
   "Linen" '(0.98039216 0.9411765 0.9019608)
   "Magenta" '(1.0 0.0 1.0)
   "Maroon" '(0.5019608 0.0 0.0)
   "MediumAquaMarine" '(0.4 0.8039216 0.6666667)
   "MediumBlue" '(0.0 0.0 0.8039216)
   "MediumOrchid" '(0.7294118 0.33333334 0.827451)
   "MediumPurple" '(0.5764706 0.4392157 0.85882354)
   "MediumSeaGreen" '(0.23529412 0.7019608 0.44313726)
   "MediumSlateBlue" '(0.48235294 0.40784314 0.93333334)
   "MediumSpringGreen" '(0.0 0.98039216 0.6039216)
   "MediumTurquoise" '(0.28235295 0.81960785 0.8)
   "MediumVioletRed" '(0.78039217 0.08235294 0.52156866)
   "MidnightBlue" '(0.09803922 0.09803922 0.4392157)
   "MintCream" '(0.9607843 1.0 0.98039216)
   "MistyRose" '(1.0 0.89411765 0.88235295)
   "Moccasin" '(1.0 0.89411765 0.70980394)
   "NavajoWhite" '(1.0 0.87058824 0.6784314)
   "Navy" '(0.0 0.0 0.5019608)
   "OldLace" '(0.99215686 0.9607843 0.9019608)
   "Olive" '(0.5019608 0.5019608 0.0)
   "OliveDrab" '(0.41960785 0.5568628 0.13725491)
   "Orange" '(1.0 0.64705884 0.0)
   "OrangeRed" '(1.0 0.27058825 0.0)
   "Orchid" '(0.85490197 0.4392157 0.8392157)
   "PaleGoldenRod" '(0.93333334 0.9098039 0.6666667)
   "PaleGreen" '(0.59607846 0.9843137 0.59607846)
   "PaleTurquoise" '(0.6862745 0.93333334 0.93333334)
   "PaleVioletRed" '(0.85882354 0.4392157 0.5764706)
   "PapayaWhip" '(1.0 0.9372549 0.8352941)
   "PeachPuff" '(1.0 0.85490197 0.7254902)
   "Peru" '(0.8039216 0.52156866 0.24705882)
   "Pink" '(1.0 0.7529412 0.79607844)
   "Plum" '(0.8666667 0.627451 0.8666667)
   "PowderBlue" '(0.6901961 0.8784314 0.9019608)
   "Purple" '(0.5019608 0.0 0.5019608)
   "RebeccaPurple" '(0.4 0.2 0.6)
   "Red" '(1.0 0.0 0.0)
   "RosyBrown" '(0.7372549 0.56078434 0.56078434)
   "RoyalBlue" '(0.25490198 0.4117647 0.88235295)
   "SaddleBrown" '(0.54509807 0.27058825 0.07450981)
   "Salmon" '(0.98039216 0.5019608 0.44705883)
   "SandyBrown" '(0.95686275 0.6431373 0.3764706)
   "SeaGreen" '(0.18039216 0.54509807 0.34117648)
   "SeaShell" '(1.0 0.9607843 0.93333334)
   "Sienna" '(0.627451 0.32156864 0.1764706)
   "Silver" '(0.7529412 0.7529412 0.7529412)
   "SkyBlue" '(0.5294118 0.80784315 0.92156863)
   "SlateBlue" '(0.41568628 0.3529412 0.8039216)
   "SlateGray" '(0.4392157 0.5019608 0.5647059)
   "SlateGrey" '(0.4392157 0.5019608 0.5647059)
   "Snow" '(1.0 0.98039216 0.98039216)
   "SpringGreen" '(0.0 1.0 0.49803922)
   "SteelBlue" '(0.27450982 0.50980395 0.7058824)
   "Tan" '(0.8235294 0.7058824 0.54901963)
   "Teal" '(0.0 0.5019608 0.5019608)
   "Thistle" '(0.84705883 0.7490196 0.84705883)
   "Tomato" '(1.0 0.3882353 0.2784314)
   "Turquoise" '(0.2509804 0.8784314 0.8156863)
   "Violet" '(0.93333334 0.50980395 0.93333334)
   "Wheat" '(0.9607843 0.87058824 0.7019608)
   "White" '(1.0 1.0 1.0)
   "WhiteSmoke" '(0.9607843 0.9607843 0.9607843)
   "Yellow" '(1.0 1.0 0.0)
   "YellowGreen" '(0.6039216 0.8039216 0.19607843)))

(export-always '*colors*)
(defvar *colors* (alexandria:hash-table-keys *colors->triples*)
  "List of CSS color names.")

(defun name->triple (color)
  (gethash color *colors->triples*))

(export-always 'parse-color)
(defun parse-color (color)
  "Parse the COLOR to a triple of (RED GREEN BLUE) float numbers in a [0.0, 1.0] range."
  (cond
    ((or (and (uiop:string-prefix-p "#" color)
              (or (= 4 (length color))
                  (= 7 (length color))))
         (and (every (rcurry #'digit-char-p 16)
                     color)
              (or (or (= 3 (length color))
                      (= 6 (length color))))))
     (hex->triple color))
    ((uiop:string-prefix-p "rgb" color)
     (rgb/a->triple color))
    (t (name->triple color))))

(export-always '*parsing-function*)
(defvar *parsing-function* #'parse-color
  "The function to parse color string to a (RED GREEN BLUE) triple.
Defaults to `parse-color'.")

(export-always 'relative-luminance)
(defun relative-luminance (color)
  "Compute relative luminance of COLOR."
  ;; See https://www.w3.org/TR/WCAG20-TECHS/G18.html
  (loop for const in '(0.2126 0.7152 0.0722)
        for rgb-component in (parse-color color)
        sum (* const (if (<= rgb-component 0.03928)
                         (/ rgb-component 12.92)
                         (expt (/ (+ rgb-component 0.055) 1.055) 2.4)))))

(export-always 'contrast-ratio)
(defun contrast-ratio (color1 color2)
  "Compute contrast ratio between COLOR1 and COLOR2."
  (let ((ratio (/ (+ (relative-luminance color1) 0.05)
                  (+ (relative-luminance color2) 0.05))))
    (max ratio (/ ratio))))

(export-always 'contrasting-color)
(defun contrasting-color (color)
  "Find the contrasting color for COLOR.
This computed color will look good as either the background for COLOR or text
color on top of COLORed background."
  (if (< (relative-luminance color)
         ;; Roughly the luminance of #777, the color
         ;; equally contrasting with black and white.
         0.2)
      "white"
      "black"))
